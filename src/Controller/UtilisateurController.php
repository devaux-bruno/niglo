<?php


namespace App\Controller;


use App\Entity\Utilisateur;
use App\Form\UtilisateurEditType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class UtilisateurController extends AbstractController
{
    /**
     * @Route("admin/user", name="user_index")
     */
    public function index()
    {
        $doctrine = $this->getDoctrine();

        $userRepository = $doctrine->getRepository(Utilisateur::class);
        $resultatedit= $userRepository->findAll();

        return $this->render('admin/index_user.html.twig', ['resultatedit' => $resultatedit]);
    }

    /**
     * @Route("/member/profil", name="profil_index")
     */
    public function indexProfil()
    {

        return $this->render('member/profil.html.twig', [
        ]);
    }

    /**
     * @Route("/member/edit/{id}", name="user_edit")
     */
    public function edit(Request $request, Utilisateur $id)
    {

        $idUser = $this->getUser()->getId();
        $numIdUser = $id->getId();

        $doctrine = $this->getDoctrine();
        $entityManager = $doctrine->getManager();
        $userPicture = $entityManager->getRepository(Utilisateur::class)->find($id)->getphoto();

        if($idUser != $numIdUser ) {
            $this->addFlash('error', 'Vous ne pouvez modifier que votre profil');
            return $this->redirectToRoute('home',[]);
        }

        $form = $this->createForm(UtilisateurEditType::class, $id, []);
        $form->handleRequest($request);

        if( $form->isSubmitted() && $form->isValid())
        {

            if( !empty($userPicture) ){

                $file = $form->get('photo')->getData();

                if( !empty($file) ){
                    //suppression de l'ancienne photo
                    $fichierSupp = $this->getParameter('profil_pictures_directory');
                    unlink($fichierSupp.$userPicture);
                    $fs = new Filesystem();
                    $fs->remove($fichierSupp.$id->getPhoto());

                    //update de la nouvelle photo
                    $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                    try {
                        $file->move(
                            $this->getParameter('profil_pictures_directory'),
                            $fileName
                        );
                    } catch (FileException $e) {
                        $this->addFlash('error', 'Un problème est survenue sur votre photo lors de la modification!');

                        return $this->redirectToRoute('user_edit', []);
                    }
                }
            }
            else{
                $file = $form->get('photo')->getData();
                if( !empty($file) ){
                    //ajout d'une photo
                    $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                    try {
                        $file->move(
                            $this->getParameter('profil_pictures_directory'),
                            $fileName
                        );
                    } catch (FileException $e) {
                        $this->addFlash('error', 'Un problème est survenue sur votre photo lors de l\'enregistrement!');

                        return $this->redirectToRoute('user_edit', []);
                    }
                }
            }

            $id->setPhoto($fileName);
            $entityManager->persist($id);
            $entityManager->flush();

            $this->addFlash('success', 'Votre profil a bien été modifié!');

            return $this->redirectToRoute('profil_index',[]);
        }
        return $this->render('member/user_edit.html.twig',[
            'formUserEdit' => $form->createView(),
        ]);
    }



    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}